# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: askmyteam-quiz
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_ADMIN_USER: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_ADMIN_USER}
    DYNAMODB_QUESTION_TABLE: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_QUESTION_TABLE}
    DYNAMODB_DEMO_QUESTION_TABLE: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_DEMO_QUESTION_TABLE}
    DYNAMODB_QUIZ: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_QUIZ}
    DYNAMODB_USER: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_USER}
    DYNAMODB_RESPONSE: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_RESPONSE}
    DYNAMODB_DEMO_RESPONSE: ${file(./params.yml):${opt:stage, self:provider.stage, 'dev'}.DYNAMODB_DEMO_RESPONSE}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/AdminUser"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/QuestionTable"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/DemoQuestionTable"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/Quiz"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/User"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/Response"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:436545416660:table/DemoResponse"  



resources:
  Resources:
    DynamoDbTableAdminUser:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "AdminID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.AdminUser}
    DynamoDbTableQuestionTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "Quiz_ID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Question_ID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.QuestionTable}  
    DynamoDbTableDemoQuestionTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "Quiz_ID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Question_ID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.DemoQuestionTable}
    DynamoDbTableQuiz:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "Quiz_ID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Question_ID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.Quiz}
    DynamoDbTableUser:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "Email"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "User_ID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.User}
    DynamoDbTableResponse:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "QuizUser_ID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Question_ID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.Response}
    DynamoDbTableDemoResponse:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "QuizUser_ID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Question_ID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.DemoResponse}


   

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createUser:
    handler: api/user.create
    memorySize: 128
    description: Legacy API to allow for more admin users to be added to the system
    events:
      -http:
        path: user
        method: post
  getUsers:
    handler: api/user.list
    memorySize: 128
    description: Legacy API to allow all users to be retrieved from the DB
    events:
      -http:
        path: user
        method: get
  getUserByName:
    handler: api/user.get
    events:
      -http:
        path: users/{name}
        method: get
  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
DynamoDBIamPolicyAdmin:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableAdmin
      Properties:
        PolicyName: lambda-dynamodb-orgs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/AdminUser
        Roles:
          - Ref: IamRoleLambdaExecution
DynamoDBIamPolicyQuestion:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableQuestion
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/QuestionTable
        Roles:
          - Ref: IamRoleLambdaExecution
DynamoDBIamPolicyDemoQuestion:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableUsers
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/DemoQuestionTable
        Roles:
          - Ref: IamRoleLambdaExecution
DynamoDBIamPolicyQuiz:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableQuiz
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/Quiz
        Roles:
          - Ref: IamRoleLambdaExecution
DynamoDBIamPolicyUser:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableUser
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/User
        Roles:
          - Ref: IamRoleLambdaExecution
DynamoDBIamPolicyResponse:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableResponse
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/Response
        Roles:
          - Ref: IamRoleLambdaExecution
DynamoDBIamPolicyDemoResponse:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableDemoResponse
      Properties:
        PolicyName: lambda-dynamodb-users
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/DemoResponse
        Roles:
          - Ref: IamRoleLambdaExecution
        

        

        

        

        

 